var documenterSearchIndex = {"docs":
[{"location":"lib/library/#Library","page":"Library","title":"Library","text":"","category":"section"},{"location":"lib/library/","page":"Library","title":"Library","text":"Documentation for SatelliteToolboxTle.jl.","category":"page"},{"location":"lib/library/","page":"Library","title":"Library","text":"Modules = [SatelliteToolboxTle]","category":"page"},{"location":"lib/library/#SatelliteToolboxTle.AbstractTleFetcher","page":"Library","title":"SatelliteToolboxTle.AbstractTleFetcher","text":"abstract type AbstractTleFetcher\n\nAbstract type for all TLE fetchers.\n\n\n\n\n\n","category":"type"},{"location":"lib/library/#SatelliteToolboxTle.TLE","page":"Library","title":"SatelliteToolboxTle.TLE","text":"struct TLE\n\nStore the elements of a TLE (two-line elemens) using the same units.\n\nnote: Note\nWe do not have fields for the line checksum since they are only required when creating or parsing a TLE string.\n\nFields\n\nname: Name of the satellite.\n\nFirst line\n\nsatellite_number: Satellite number.\nclassification: Classification ('U', 'C', or 'S').\ninternational_designator: International designator.\nepoch_year: Epoch year (two digits).\nepoch_day: Epoch day (day + fraction of the day).\ndn_o2: 1st time derivative of mean motion / 2 [rev/day²].\nddn_o6: 2nd time derivative of mean motion / 6 [rev/day³].\nbstar: B* drag term.\nelement_set_number: Element set number.\n\nSecond line\n\nincliantion: Inclination [deg].\nraan: Right ascension of the ascending node [deg].\neccentricity: Eccentricity [ ].\nargument_of_perigee: Argument of perigee [deg].\nmean_anomaly: Mean anomaly [deg].\nmean_motion: Mean motion [rev/day].\nrevolution_number: Revolution number at epoch [rev].\n\nCreating TLEs\n\nYou can manually create a TLE by calling the function TLE(; kwargs...), where kwargs... are keyword arguments with the same name as the fields. In this case, the following elements are required:\n\nepoch_year, epoch_day, inclination, raan, eccentricity,   argument_of_perigee, mean_anomaly and mean_motion.\n\nThe other ones are optional and default values will be assigned if not present.\n\n\n\n\n\n","category":"type"},{"location":"lib/library/#SatelliteToolboxTle._show_tle-Tuple{IO, TLE}","page":"Library","title":"SatelliteToolboxTle._show_tle","text":"_show_tle(io::IO, tle::TLE; color::Bool = true)\n\nShow the TLE tle in the IO io.\n\nKeywords\n\ncolor::Bool: If true, the text will be printed using colors.   (Default = true)\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTle.create_tle_fetcher-Tuple{Type{CelestrakTleFetcher}}","page":"Library","title":"SatelliteToolboxTle.create_tle_fetcher","text":"create_tle_fetcher(::Type{CelestrakTleFetcher}; kwargs...) return CelestrakTleFetcher(url) end\n\nCreate a TLE fetcher from Celestrak service.\n\nKeywords\n\nurl::String: Default PHP webpage address that will be used to perform the queries. (Default: \"https://celestrak.org/NORAD/elements/gp.php\")\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTle.create_tle_fetcher-Union{Tuple{T}, Tuple{Type{T}, Vararg{Any}}} where T<:AbstractTleFetcher","page":"Library","title":"SatelliteToolboxTle.create_tle_fetcher","text":"create_tle_fetcher(::Type{T}, args...; kwargs...) where T <: AbstractTleFetcher\n\nCreate a TLE fetcher of type T.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTle.fetch_tles-Tuple{CelestrakTleFetcher}","page":"Library","title":"SatelliteToolboxTle.fetch_tles","text":"fetch_tles(fetcher::CelestrakTleFetcher; international_designator::Union{Nothing, AbstractString} = nothing, satellite_number::Union{Nothing, Number} = nothing, satellite_name::Union{Nothing, AbstractString} = nothing,)\n\nFetch TLEs from the Celestrak using fetch with the parameters in kwargs....\n\nThis function returns a Vector{TLE} with the fetched TLEs. If an error is found, it returns nothing.\n\nKeywords\n\ninternational_designator::Union{Nothing, AbstractString}: International   designator using the Celestrak format YYYY-NNN, where YYYY is the launch   year, and the NNN is the launch number. (Default: nothing)\nsatellite_number::Union{Nothing, Number}: Satellite catalog number (NORAD).   (Default = nothing)\nsatellite_name::Union{Nothing, AbstractString}: Satellite name. Notice that   the system will search for all satellites whose name contains this string.   (Default: nothing)\n\nnote: Note\nOnly one search parameter is supported. If more than one is given, the precedence is: 1) satellite_number; 2) international_designator; and 3) and satellite_name.\n\nnote: Note\nIf no search parameter is provided, the function throws an error.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTle.fetch_tles-Tuple{T} where T<:AbstractTleFetcher","page":"Library","title":"SatelliteToolboxTle.fetch_tles","text":"fetch_tles(fetcher::T; kwargs...)\n\nFetch TLEs using fetcher.\n\nThe keywords kwargs... are used to customize the search. It depends on the fetcher type T.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTle.read_tle-Tuple{AbstractString, AbstractString}","page":"Library","title":"SatelliteToolboxTle.read_tle","text":"read_tle(l1::AbstractString, l2::AbstractString; name::AbstractString = \"UNDEFINED\", verify_checksum::Bool = false)\n\nRead the TLE in which the first line is l1 and second line is l2.\n\nThe keyword name can be used to set the satellite name in the output TLE object.\n\nKeywords\n\nverify_checksum::Bool: If true, the checksum of both TLE lines will be   verified. Otherwise, the checksum will not be checked.   (Default = true)\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTle.read_tle-Tuple{AbstractString}","page":"Library","title":"SatelliteToolboxTle.read_tle","text":"read_tle(str::AbstractString; verify_checksum::Bool = false)\n\nRead the TLE in the string str.\n\nnote: Note\nstr must contain only one TLE. Hence, it must have two or three non-empty lines. The lines beginning with the character # are discarded.\n\nKeywords\n\nverify_checksum::Bool: If true, the checksum of both TLE lines will be   verified. Otherwise, the checksum will not be checked.   (Default = true)\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTle.read_tles-Tuple{AbstractString}","page":"Library","title":"SatelliteToolboxTle.read_tles","text":"read_tles(tles::AbstractString; verify_checksum::Bool = true)\n\nParse a set of TLEs in the string tles. This function returns a Vector{TLE} with the parsed TLEs.\n\nKeywords\n\nverify_checksum::Bool: If true, the checksum of both TLE lines will be   verified. Otherwise, the checksum will not be checked.   (Default = true)\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTle.read_tles_from_file-Tuple{String}","page":"Library","title":"SatelliteToolboxTle.read_tles_from_file","text":"read_tles_from_file(filename::String; verify_checksum::Bool = true)\n\nRead the TLEs in the file filename and return a Vector{TLE} with the parsed TLEs.\n\nKeywords\n\nverify_checksum::Bool: If true, the checksum of both TLE lines will be   verified. Otherwise, the checksum will not be checked.   (Default = true)\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTle.tle_epoch-Tuple{TLE}","page":"Library","title":"SatelliteToolboxTle.tle_epoch","text":"tle_epoch(tle::TLE)\n\nReturn the Julian day related to the tle epoch.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTle.tle_epoch-Tuple{Type{Dates.DateTime}, TLE}","page":"Library","title":"SatelliteToolboxTle.tle_epoch","text":"tle_epoch(DateTime, tle::TLE)\n\nReturn the DateTime related to the tle epoch.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTle.tle_line_checksum-Tuple{AbstractString}","page":"Library","title":"SatelliteToolboxTle.tle_line_checksum","text":"tle_line_checksum(str::AbstractString)\n\nCompute the checksum of the line str modulo 10.\n\nThe algorithm is simple: add all the numbers in the line, ignoring letters, spaces, periods, and plus signs, but assigning +1 to the minus signs. The checksum is the remainder of the division by 10.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTle.@tle_nc_str-Tuple{Any}","page":"Library","title":"SatelliteToolboxTle.@tle_nc_str","text":"@tle_nc_str(str)\n\nParse one TLE in the string `str.\n\nThis function returns the parsed TLE or nothing, if an error occured.\n\nnote: Note\nThis function does not verify the checksums of the TLE. If the checksum verification is desired, use @tle_str.\n\nnote: Note\nstr must contain only one TLE. Hence, it must have two or three non-empty lines. The lines beginning with the character # are discarded.\n\nExample\n\njulia> tles = tle_nc\"\"\"\n       CBERS 4\n       1 40336U 14079A   18166.15595376 -.00000014  00000-0  10174-4 0  9993\n       2 40336  98.4141 237.7928 0001694  75.7582 284.3804 14.35485112184485\n       \"\"\"\n\n\n\n\n\n","category":"macro"},{"location":"lib/library/#SatelliteToolboxTle.@tle_str-Tuple{Any}","page":"Library","title":"SatelliteToolboxTle.@tle_str","text":"@tle_str(str)\n\nParse one TLE in the string `str.\n\nThis function returns the parsed TLE or nothing, if an error occured.\n\nnote: Note\nThis function verifies the checksums of the TLE. If the checksum verification is not desired, use @tle_nc_str.\n\nnote: Note\nstr must contain only one TLE. Hence, it must have two or three non-empty lines. The lines beginning with the character # are discarded.\n\nExample\n\njulia> tle = tle\"\"\"\n       CBERS 4\n       1 40336U 14079A   18166.15595376 -.00000014  00000-0  10174-4 0  9993\n       2 40336  98.4141 237.7928 0001694  75.7582 284.3804 14.35485112184485\n       \"\"\"\n\n\n\n\n\n","category":"macro"},{"location":"lib/library/#SatelliteToolboxTle.@tles_nc_str-Tuple{Any}","page":"Library","title":"SatelliteToolboxTle.@tles_nc_str","text":"@tles_nc_str(str)\n\nParse a set of TLEs in the string str and return them as a Vector{TLE}.\n\nnote: Note\nThis version does not verify the checksum of the TLE. If the checksum verification is required, use @tles_nc_str.\n\nExample\n\njulia> tles = tles_nc\"\"\"\n       CBERS 4\n       1 40336U 14079A   18166.15595376 -.00000014  00000-0  10174-4 0  9993\n       2 40336  98.4141 237.7928 0001694  75.7582 284.3804 14.35485112184485\n       SCD 1\n       1 22490U 93009B   18165.62596833  .00000225  00000-0  11410-4 0  9991\n       2 22490  24.9690 231.7852 0042844 200.7311 292.7198 14.44524498338066\n       SCD 2\n       1 25504U 98060A   18165.15074951  .00000201  00000-0  55356-5 0  9994\n       2 25504  24.9961  80.1303 0017060 224.4822 286.6438 14.44043397 37312\n       \"\"\"\n\n\n\n\n\n","category":"macro"},{"location":"lib/library/#SatelliteToolboxTle.@tles_str-Tuple{Any}","page":"Library","title":"SatelliteToolboxTle.@tles_str","text":"@tles_str(str)\n\nParse a set of TLEs in the string str and return them as a Vector{TLE}.\n\nnote: Note\nThis function verifies the checksums of the TLE. If the checksum verification is not desired, use @tles_nc_str.\n\nExample\n\njulia> tles = tles\"\"\"\n       CBERS 4\n       1 40336U 14079A   18166.15595376 -.00000014  00000-0  10174-4 0  9993\n       2 40336  98.4141 237.7928 0001694  75.7582 284.3804 14.35485112184485\n       SCD 1\n       1 22490U 93009B   18165.62596833  .00000225  00000-0  11410-4 0  9991\n       2 22490  24.9690 231.7852 0042844 200.7311 292.7198 14.44524498338066\n       SCD 2\n       1 25504U 98060A   18165.15074951  .00000201  00000-0  55356-5 0  9994\n       2 25504  24.9961  80.1303 0017060 224.4822 286.6438 14.44043397 37312\n       \"\"\"\n\n\n\n\n\n","category":"macro"},{"location":"man/auxiliary_functions/#Auxiliary-functions","page":"Auxiliary functions","title":"Auxiliary functions","text":"","category":"section"},{"location":"man/auxiliary_functions/","page":"Auxiliary functions","title":"Auxiliary functions","text":"CurrentModule = SatelliteToolboxTle\nDocTestSetup = quote\n    using SatelliteToolboxTle\nend","category":"page"},{"location":"man/auxiliary_functions/","page":"Auxiliary functions","title":"Auxiliary functions","text":"This page describes some auxiliary functions in SatelliteToolboxTle.jl.","category":"page"},{"location":"man/auxiliary_functions/#TLE-epoch","page":"Auxiliary functions","title":"TLE epoch","text":"","category":"section"},{"location":"man/auxiliary_functions/","page":"Auxiliary functions","title":"Auxiliary functions","text":"We can obtain the TLE epoch using the function tle_epoch. It can return the epoch in Julian Day, or as a DateTime, as follows:","category":"page"},{"location":"man/auxiliary_functions/","page":"Auxiliary functions","title":"Auxiliary functions","text":"julia> tle = tle\"\"\"\n       AMAZONIA 1\n       1 47699U 21015A   23083.68657856 -.00000044  10000-8  43000-4 0  9990\n       2 47699  98.4304 162.1097 0001247 136.2017 223.9283 14.40814394108652\n       \"\"\";\n\njulia> tle_epoch(tle)\n2.46002818657856e6\n\njulia> using Dates\n\njulia> tle_epoch(DateTime, tle)\n2023-03-24T16:28:40.388","category":"page"},{"location":"man/creating_tles/#Creating-TLEs","page":"Creating TLEs","title":"Creating TLEs","text":"","category":"section"},{"location":"man/creating_tles/","page":"Creating TLEs","title":"Creating TLEs","text":"CurrentModule = SatelliteToolboxTle\nDocTestSetup = quote\n    using SatelliteToolboxTle\nend","category":"page"},{"location":"man/creating_tles/","page":"Creating TLEs","title":"Creating TLEs","text":"We can create a TLE using the function:","category":"page"},{"location":"man/creating_tles/","page":"Creating TLEs","title":"Creating TLEs","text":"TLE(; kwargs...)","category":"page"},{"location":"man/creating_tles/","page":"Creating TLEs","title":"Creating TLEs","text":"where kwargs... are keywords arguments with the same name as in the TLE fields, as explained here. The following elements are required:","category":"page"},{"location":"man/creating_tles/","page":"Creating TLEs","title":"Creating TLEs","text":"epoch_year, epoch_day, inclination, raan, eccentricity,   argument_of_perigee, mean_anomaly and mean_motion.","category":"page"},{"location":"man/creating_tles/","page":"Creating TLEs","title":"Creating TLEs","text":"The algorithm assigns default values for the other fields if they are not present.","category":"page"},{"location":"man/creating_tles/","page":"Creating TLEs","title":"Creating TLEs","text":"julia> tle = TLE(\n           name = \"My satellite\",\n           epoch_year = 23,\n           epoch_day = 1.5,\n           inclination = 98.405,\n           raan = 220.19,\n           eccentricity = 0.001,\n           argument_of_perigee = 90,\n           mean_anomaly = 0.0,\n           mean_motion = 14.4\n       )\nTLE:\n                     Name : My satellite\n         Satellite number : 0\n International designator : 00000\n       Epoch (Year / Day) : 23 /   1.50000000 (2023-01-01T12:00:00)\n       Element set number : 0\n             Eccentricity :   0.00100000 deg\n              Inclination :  98.40500000 deg\n                     RAAN : 220.19000000 deg\n      Argument of perigee :  90.00000000 deg\n             Mean anomaly :   0.00000000 deg\n          Mean motion (n) :  14.40000000 revs/day\n        Revolution number : 0\n                       B* : 0.000000 1/[er]\n                    ṅ / 2 : 0.000000 rev/day²\n                    n̈ / 6 : 0.000000 rev/day³","category":"page"},{"location":"man/creating_tles/","page":"Creating TLEs","title":"Creating TLEs","text":"The text representation of the TLE can be obtained by converting the object to a string using convert:","category":"page"},{"location":"man/creating_tles/","page":"Creating TLEs","title":"Creating TLEs","text":"julia> convert(String, tle) |> print\nMy satellite\n1 00000U 00000    23001.50000000  .00000000  00000+0  00000+0 0    02\n2 00000  98.4050 220.1900 0010000  90.0000   0.0000 14.40000000    01","category":"page"},{"location":"man/fetching_tles/#Fetching-TLEs","page":"Fetching TLEs","title":"Fetching TLEs","text":"","category":"section"},{"location":"man/fetching_tles/","page":"Fetching TLEs","title":"Fetching TLEs","text":"CurrentModule = SatelliteToolboxTle\nDocTestSetup = quote\n    using SatelliteToolboxTle\nend","category":"page"},{"location":"man/fetching_tles/","page":"Fetching TLEs","title":"Fetching TLEs","text":"This package defines a simple API to fetch TLEs from different sources. For more information, see the file API.md in the directory ./src/fetcher/.","category":"page"},{"location":"man/fetching_tles/","page":"Fetching TLEs","title":"Fetching TLEs","text":"It already contains the support to Celestrak. To fetch TLEs from this source, we first need to create the fetcher object:","category":"page"},{"location":"man/fetching_tles/","page":"Fetching TLEs","title":"Fetching TLEs","text":"julia> f = create_tle_fetcher(CelestrakTleFetcher)\nCelestrakTleFetcher(\"https://celestrak.org/NORAD/elements/gp.php\")","category":"page"},{"location":"man/fetching_tles/","page":"Fetching TLEs","title":"Fetching TLEs","text":"Afterward, we can fetch the TLEs using the function fetch_tles:","category":"page"},{"location":"man/fetching_tles/","page":"Fetching TLEs","title":"Fetching TLEs","text":"julia> fetch_tles(f, satellite_name = \"AMAZONIA 1\")\n[ Info: Fetch TLEs from Celestrak using satellite name: \"AMAZONIA 1\" ...\n1-element Vector{TLE}:\n TLE: AMAZONIA 1 (Epoch = 2023-03-28T05:28:43.099)","category":"page"},{"location":"man/fetching_tles/","page":"Fetching TLEs","title":"Fetching TLEs","text":"This function will always return a Vector{TLE}.","category":"page"},{"location":"man/fetching_tles/","page":"Fetching TLEs","title":"Fetching TLEs","text":"For Celestrak fetcher, the following options are available:","category":"page"},{"location":"man/fetching_tles/","page":"Fetching TLEs","title":"Fetching TLEs","text":"international_designator::Union{Nothing, AbstractString}: International   designator using the Celestrak format YYYY-NNN, where YYYY is the launch   year, and the NNN is the launch number. (Default: nothing)\nsatellite_number::Union{Nothing, Number}: Satellite catalog number (NORAD).   (Default = nothing)\nsatellite_name::Union{Nothing, AbstractString}: Satellite name. Notice that   the system will search for all satellites whose name contains this string.   (Default: nothing)","category":"page"},{"location":"man/fetching_tles/","page":"Fetching TLEs","title":"Fetching TLEs","text":"note: Note\nOnly one search parameter is supported. If more than one is given, the precedence is: 1) satellite_number; 2) international_designator; and 3) and satellite_name.","category":"page"},{"location":"man/fetching_tles/","page":"Fetching TLEs","title":"Fetching TLEs","text":"note: Note\nIf no search parameter is provided, the function throws an error.","category":"page"},{"location":"man/fetching_tles/","page":"Fetching TLEs","title":"Fetching TLEs","text":"Thus, if we want to know, for example, all the satellites that were launched by the same rocket, we can search by the international designator as follows:","category":"page"},{"location":"man/fetching_tles/","page":"Fetching TLEs","title":"Fetching TLEs","text":"julia> fetch_tles(f, international_designator = \"2021-015\")\n[ Info: Fetch TLEs from Celestrak using international designator: \"2021-015\" ...\n8-element Vector{TLE}:\n TLE: AMAZONIA 1 (Epoch = 2023-03-28T05:28:43.099)\n TLE: OBJECT B (Epoch = 2023-03-28T03:55:03.696)\n TLE: SAI-1 NANOCONNECT-2 (Epoch = 2023-03-28T05:20:11.308)\n TLE: SINE (SINDHUNETRA) (Epoch = 2023-03-28T15:49:01.492)\n TLE: OBJECT S (Epoch = 2023-03-28T10:41:32.722)\n TLE: OBJECT T (Epoch = 2023-03-28T04:32:52.552)\n TLE: OBJECT U (Epoch = 2023-03-28T11:38:14.139)\n TLE: SDSAT (Epoch = 2023-03-28T13:22:20.912)","category":"page"},{"location":"man/fetching_tles/","page":"Fetching TLEs","title":"Fetching TLEs","text":"warning: Warning\nPlease, DO NOT abuse the fetching system. CelesTrak is a non-profit organization. SatelliteToolboxTle.jl provides only the interface to their servers. Ensure you agree with their user agreement before using the functions described here. Abusing the GP data API can lead to bans.","category":"page"},{"location":"man/parsing_tles/#Parsing-TLEs","page":"Parsing TLEs","title":"Parsing TLEs","text":"","category":"section"},{"location":"man/parsing_tles/","page":"Parsing TLEs","title":"Parsing TLEs","text":"CurrentModule = SatelliteToolboxTle\nDocTestSetup = quote\n    using SatelliteToolboxTle\nend","category":"page"},{"location":"man/parsing_tles/","page":"Parsing TLEs","title":"Parsing TLEs","text":"This package contains functions to parse TLEs from strings and files.","category":"page"},{"location":"man/parsing_tles/#Parsing-TLEs-from-strings","page":"Parsing TLEs","title":"Parsing TLEs from strings","text":"","category":"section"},{"location":"man/parsing_tles/","page":"Parsing TLEs","title":"Parsing TLEs","text":"The simplest way to parse one single TLE is using the macro @tle_str:","category":"page"},{"location":"man/parsing_tles/","page":"Parsing TLEs","title":"Parsing TLEs","text":"julia> tle = tle\"\"\"\n       AMAZONIA 1\n       1 47699U 21015A   23083.68657856 -.00000044  10000-8  43000-4 0  9990\n       2 47699  98.4304 162.1097 0001247 136.2017 223.9283 14.40814394108652\n       \"\"\"\nTLE:\n                     Name : AMAZONIA 1\n         Satellite number : 47699\n International designator : 21015A\n       Epoch (Year / Day) : 23 /  83.68657856 (2023-03-24T16:28:40.388)\n       Element set number : 999\n             Eccentricity :   0.00012470 deg\n              Inclination :  98.43040000 deg\n                     RAAN : 162.10970000 deg\n      Argument of perigee : 136.20170000 deg\n             Mean anomaly : 223.92830000 deg\n          Mean motion (n) :  14.40814394 revs/day\n        Revolution number : 10865\n                       B* : 0.000043 1/[er]\n                    ṅ / 2 : -0.000000 rev/day²\n                    n̈ / 6 : 0.000000 rev/day³","category":"page"},{"location":"man/parsing_tles/","page":"Parsing TLEs","title":"Parsing TLEs","text":"This macro considers only one TLE, leading to an error if the string contains additional information:","category":"page"},{"location":"man/parsing_tles/","page":"Parsing TLEs","title":"Parsing TLEs","text":"julia> tle = tle\"\"\"\n       AMAZONIA 1\n       1 47699U 21015A   23083.68657856 -.00000044  10000-8  43000-4 0  9990\n       2 47699  98.4304 162.1097 0001247 136.2017 223.9283 14.40814394108652\n       CBERS 4A\n       1 44883U 19093E   23087.54098578  .00002943  00000+0  38100-3 0  9997\n       2 44883  97.8669 167.4611 0001705  77.3129 282.8275 14.81612352176856\n       \"\"\"\nERROR: LoadError: ArgumentError: The string `str` must contain only one TLE (2 or 3 lines).\nStacktrace:\n [1] read_tle(str::String; verify_checksum::Bool)\n   @ SatelliteToolboxTle ~/.julia/dev/SatelliteToolboxTle/src/read.jl:161\n [2] var\"@tle_str\"(__source__::LineNumberNode, __module__::Module, str::Any)\n   @ SatelliteToolboxTle ~/.julia/dev/SatelliteToolboxTle/src/read.jl:43\nin expression starting at REPL[3]:1","category":"page"},{"location":"man/parsing_tles/","page":"Parsing TLEs","title":"Parsing TLEs","text":"Multiple TLEs can be parsed using the macro @tles_str:","category":"page"},{"location":"man/parsing_tles/","page":"Parsing TLEs","title":"Parsing TLEs","text":"julia> tles = tles\"\"\"\n       AMAZONIA 1\n       1 47699U 21015A   23083.68657856 -.00000044  10000-8  43000-4 0  9990\n       2 47699  98.4304 162.1097 0001247 136.2017 223.9283 14.40814394108652\n       CBERS 4A\n       1 44883U 19093E   23087.54098578  .00002943  00000+0  38100-3 0  9997\n       2 44883  97.8669 167.4611 0001705  77.3129 282.8275 14.81612352176856\n       \"\"\"\n2-element Vector{TLE}:\n TLE: AMAZONIA 1 (Epoch = 2023-03-24T16:28:40.388)\n TLE: CBERS 4A (Epoch = 2023-03-28T12:59:01.171)","category":"page"},{"location":"man/parsing_tles/","page":"Parsing TLEs","title":"Parsing TLEs","text":"In this case, the result will always be a Vector{TLE}.","category":"page"},{"location":"man/parsing_tles/","page":"Parsing TLEs","title":"Parsing TLEs","text":"note: Note\nWe distinguished the parsing algorithm of one or multiple TLEs to avoid unnecessary allocations in the former.","category":"page"},{"location":"man/parsing_tles/","page":"Parsing TLEs","title":"Parsing TLEs","text":"@tle_str and @tles_str will always check the checksum of the two lines. If this verification is not desired, use the versions @tle_nc_str and @tles_nc_str.","category":"page"},{"location":"man/parsing_tles/","page":"Parsing TLEs","title":"Parsing TLEs","text":"If the TLE is programmatically added to a string, it can be parsed using the functions read_tle and read_tles for one or multiple TLEs, respectively.","category":"page"},{"location":"man/parsing_tles/","page":"Parsing TLEs","title":"Parsing TLEs","text":"julia> tle_str = \"\"\"\n       AMAZONIA 1\n       1 47699U 21015A   23083.68657856 -.00000044  10000-8  43000-4 0  9990\n       2 47699  98.4304 162.1097 0001247 136.2017 223.9283 14.40814394108652\n       \"\"\";\n\njulia> read_tle(tle_str)\nTLE:\n                     Name : AMAZONIA 1\n         Satellite number : 47699\n International designator : 21015A\n       Epoch (Year / Day) : 23 /  83.68657856 (2023-03-24T16:28:40.388)\n       Element set number : 999\n             Eccentricity :   0.00012470 deg\n              Inclination :  98.43040000 deg\n                     RAAN : 162.10970000 deg\n      Argument of perigee : 136.20170000 deg\n             Mean anomaly : 223.92830000 deg\n          Mean motion (n) :  14.40814394 revs/day\n        Revolution number : 10865\n                       B* : 0.000043 1/[er]\n                    ṅ / 2 : -0.000000 rev/day²\n                    n̈ / 6 : 0.000000 rev/day³\n\njulia> tles_str = \"\"\"\n       AMAZONIA 1\n       1 47699U 21015A   23083.68657856 -.00000044  10000-8  43000-4 0  9990\n       2 47699  98.4304 162.1097 0001247 136.2017 223.9283 14.40814394108652\n       CBERS 4A\n       1 44883U 19093E   23087.54098578  .00002943  00000+0  38100-3 0  9997\n       2 44883  97.8669 167.4611 0001705  77.3129 282.8275 14.81612352176856\n       \"\"\";\n\njulia> tles = read_tles(tles_str)\n2-element Vector{TLE}:\n TLE: AMAZONIA 1 (Epoch = 2023-03-24T16:28:40.388)\n TLE: CBERS 4A (Epoch = 2023-03-28T12:59:01.171)","category":"page"},{"location":"man/parsing_tles/","page":"Parsing TLEs","title":"Parsing TLEs","text":"If the user does not want checksum verification, pass the keyword verify_checksum = false.","category":"page"},{"location":"man/parsing_tles/#Parsing-TLEs-from-files","page":"Parsing TLEs","title":"Parsing TLEs from files","text":"","category":"section"},{"location":"man/parsing_tles/","page":"Parsing TLEs","title":"Parsing TLEs","text":"We can parse TLEs in files using the function read_tles_from_file:","category":"page"},{"location":"man/parsing_tles/","page":"Parsing TLEs","title":"Parsing TLEs","text":"julia> tles = read_tles_from_file(\"samples.tle\")\n2-element Vector{TLE}:\n TLE: AMAZONIA 1 (Epoch = 2023-03-24T16:28:40.388)\n TLE: CBERS 4A (Epoch = 2023-03-25T12:02:42.585)","category":"page"},{"location":"man/parsing_tles/","page":"Parsing TLEs","title":"Parsing TLEs","text":"This function will always return a Vector{TLE}.","category":"page"},{"location":"#SatelliteToolboxTle.jl","page":"Home","title":"SatelliteToolboxTle.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package allows creating, fetching, and parsing TLEs (two-line elements).","category":"page"},{"location":"#Two-line-elements","page":"Home","title":"Two-line elements","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The TLE, or two-line elements, is a fixed-width format that express the mean elements of a object in Earth's orbit. They are used as input for the Simplified General Perturbation Model 4 (SGP4 / SDP4) to propagate satellite orbits.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For more information about the TLE, see Two-line element set.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package can be installed using:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\njulia> Pkg.add(\"SatelliteToolboxTle\")","category":"page"},{"location":"man/tle_structure/#tle_structure","page":"The TLE structure","title":"The TLE structure","text":"","category":"section"},{"location":"man/tle_structure/","page":"The TLE structure","title":"The TLE structure","text":"When a TLE is parsed using this package, the information is encapsulated in the structure TLE. Its fields are:","category":"page"},{"location":"man/tle_structure/","page":"The TLE structure","title":"The TLE structure","text":"name::String: Name of the satellite.\nsatellite_number::Int: Satellite number.\nclassification::Char: Classification ('U', 'C', or 'S').\ninternational_designator::String: International designator.\nepoch_year::Int: Epoch year (two digits).\nepoch_day::Float64: Epoch day (day + fraction of the day).\ndn_o2::Float64: 1st time derivative of mean motion / 2 [rev/day²].\nddn_o6::Float64: 2nd time derivative of mean motion / 6 [rev/day³].\nbstar::Float64: B* drag term.\nelement_set_number::Int: Element set number.\nincliantion::Float64: Inclination [deg].\nraan::Float64: Right ascension of the ascending node [deg].\neccentricity::Float64: Eccentricity [ ].\nargument_of_perigee::Float64: Argument of perigee [deg].\nmean_anomaly::Float64: Mean anomaly [deg].\nmean_motion::Float64: Mean motion [rev/day].\nrevolution_number::Int: Revolution number at epoch [rev].","category":"page"},{"location":"man/tle_structure/","page":"The TLE structure","title":"The TLE structure","text":"Notice that we preserve the units of the TLE definition.","category":"page"}]
}
